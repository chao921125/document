#配置用户或者组，默认为nobody
#user  nobody;
#允许生成的进程数，默认为1
worker_processes  5;

#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg
error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#指定nginx进程运行文件存放地址
#pid        logs/nginx.pid;


events {
    #设置网路连接序列化，防止惊群现象发生，默认为on
    accept_mutex on;
    #设置一个进程是否同时接受多个网络连接，默认为off
    multi_accept on;
    #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    #use epoll;
    #最大连接数，默认为512
    worker_connections  1024;
}


http {
    #文件扩展名与文件类型映射表
    include       mime.types;
    #默认文件类型，默认为text/plain
    default_type  application/octet-stream;

    #自定义格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #取消服务日志 off
    #access_log  logs/access.log  main;

    #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块
    sendfile        on;
    #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限
    #sendfile_max_chunk 100k;
    #tcp_nopush     on;

    #连接超时时间，默认为75s，可以在http，server，location块
    keepalive_timeout  65;

    #开启 gzip 压缩
    gzip  on;

    #热备
    upstream mysvr {
        server 127.0.0.1:2222;
        server 8.8.8.8:3333 backup;
    }

    server {
        #监听端口
        listen       80;
        #监听地址
        server_name  localhost;

        #单连接请求上限次数
        keepalive_requests 120;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            #根目录
            root   html;
            #设置默认页
            index  index.html index.htm;
            #请求转向mysvr 定义的服务器列表
            #拒绝的ip
            #deny 127.0.0.1;
            #允许的ip
            #allow 172.18.5.54;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
